T_ENUM enum
T_ID rb_color
T_OPEN_K {
T_ID RB_BLACK
T_COMMA ,
T_ID RB_RED
T_CLOSE_K }
T_SEMI_COLON ;
T_STRUCT struct
T_ID rb_node
T_OPEN_K {
T_STRUCT struct
T_ID rb_node
T_ASTERISK *
T_ID left
T_COMMA ,
T_ASTERISK *
T_ID right
T_COMMA ,
T_ASTERISK *
T_ID up
T_SEMI_COLON ;
T_LONG long
T_INT int
T_ID INTvalue
T_SEMI_COLON ;
T_ENUM enum
T_ID rb_color
T_ID color
T_SEMI_COLON ;
T_CLOSE_K }
T_SEMI_COLON ;
T_TYPEDEF typedef
T_STRUCT struct
T_ID rb_node
T_ID rb_node_t
T_SEMI_COLON ;
T_STRUCT struct
T_ID rb_tree
T_OPEN_K {
T_STRUCT struct
T_ID rb_node
T_ASTERISK *
T_ID root
T_SEMI_COLON ;
T_ID unsigned
T_INT int
T_ID size
T_SEMI_COLON ;
T_CLOSE_K }
T_SEMI_COLON ;
T_TYPEDEF typedef
T_STRUCT struct
T_ID rb_tree
T_ID rb_tree_t
T_SEMI_COLON ;
T_VOID void
T_ID _insert_simple
T_OPEN_P (
T_ID rb_tree_t
T_ASTERISK *
T_ID tree
T_COMMA ,
T_ID rb_node_t
T_ASTERISK *
T_ID new_node
T_COMMA ,
T_LONG long
T_INT int
T_ID INTvalue
T_CLOSE_P )
T_OPEN_K {
T_ID rb_node_t
T_ASTERISK *
T_ID node
T_SEMI_COLON ;
T_ID tree
T_MINUS -
T_GREATER >
T_ID size
T_PLUS +
T_PLUS +
T_SEMI_COLON ;
T_ID new_node
T_MINUS -
T_GREATER >
T_ID left
T_ASSIGN =
T_NUM 0
T_SEMI_COLON ;
T_ID new_node
T_MINUS -
T_GREATER >
T_ID right
T_ASSIGN =
T_NUM 0
T_SEMI_COLON ;
T_ID new_node
T_MINUS -
T_GREATER >
T_ID up
T_ASSIGN =
T_NUM 0
T_SEMI_COLON ;
T_ID new_node
T_MINUS -
T_GREATER >
T_ID INTvalue
T_ASSIGN =
T_ID INTvalue
T_SEMI_COLON ;
T_IF if
T_OPEN_P (
T_ID tree
T_MINUS -
T_GREATER >
T_ID size
T_EQUAL ==
T_NUM 0
T_CLOSE_P )
T_OPEN_K {
T_ID tree
T_MINUS -
T_GREATER >
T_ID root
T_ASSIGN =
T_ID new_node
T_SEMI_COLON ;
T_ID new_node
T_MINUS -
T_GREATER >
T_ID coler
T_ASSIGN =
T_ID RB_BLACK
T_SEMI_COLON ;
T_RETURN return
T_SEMI_COLON ;
T_CLOSE_K }
T_ID new_node
T_MINUS -
T_GREATER >
T_ID color
T_ASSIGN =
T_ID RB_RED
T_SEMI_COLON ;
T_ID node
T_ASSIGN =
T_ID tree
T_MINUS -
T_GREATER >
T_ID root
T_SEMI_COLON ;
T_WHILE while
T_OPEN_P (
T_ID new_node
T_MINUS -
T_GREATER >
T_ID up
T_EQUAL ==
T_NUM 0
T_CLOSE_P )
T_OPEN_K {
T_IF if
T_OPEN_P (
T_ID node
T_MINUS -
T_GREATER >
T_ID INTvalue
T_GREATER >
T_ID INTvalue
T_CLOSE_P )
T_OPEN_K {
T_IF if
T_OPEN_P (
T_ID node
T_MINUS -
T_GREATER >
T_ID left
T_EQUAL ==
T_NUM 0
T_CLOSE_P )
T_OPEN_K {
T_ID new_node
T_MINUS -
T_GREATER >
T_ID up
T_ASSIGN =
T_ID node
T_SEMI_COLON ;
T_ID node
T_MINUS -
T_GREATER >
T_ID left
T_ASSIGN =
T_ID new_node
T_SEMI_COLON ;
T_CLOSE_K }
T_ELSE else
T_ID node
T_ASSIGN =
T_ID node
T_MINUS -
T_GREATER >
T_ID left
T_SEMI_COLON ;
T_CLOSE_K }
T_ELSE else
T_OPEN_K {
T_IF if
T_OPEN_P (
T_ID node
T_MINUS -
T_GREATER >
T_ID right
T_EQUAL ==
T_NUM 0
T_CLOSE_P )
T_OPEN_K {
T_ID new_node
T_MINUS -
T_GREATER >
T_ID up
T_ASSIGN =
T_ID node
T_SEMI_COLON ;
T_ID node
T_MINUS -
T_GREATER >
T_ID right
T_ASSIGN =
T_ID new_node
T_SEMI_COLON ;
T_CLOSE_K }
T_ELSE else
T_ID node
T_ASSIGN =
T_ID node
T_MINUS -
T_GREATER >
T_ID right
T_SEMI_COLON ;
T_CLOSE_K }
T_CLOSE_K }
T_CLOSE_K }
T_VOID void
T_ID _rotate_left
T_OPEN_P (
T_ID rb_tree_t
T_ASTERISK *
T_ID tree
T_COMMA ,
T_ID rb_node_t
T_ASTERISK *
T_ID node
T_CLOSE_P )
T_OPEN_K {
T_ID rb_node_t
T_ASTERISK *
T_ID child
T_SEMI_COLON ;
T_ID child
T_ASSIGN =
T_ID node
T_MINUS -
T_GREATER >
T_ID right
T_SEMI_COLON ;
T_ID child
T_MINUS -
T_GREATER >
T_ID up
T_ASSIGN =
T_ID node
T_MINUS -
T_GREATER >
T_ID up
T_SEMI_COLON ;
T_ID node
T_MINUS -
T_GREATER >
T_ID up
T_ASSIGN =
T_ID child
T_SEMI_COLON ;
T_ID node
T_MINUS -
T_GREATER >
T_ID right
T_ASSIGN =
T_ID child
T_MINUS -
T_GREATER >
T_ID left
T_SEMI_COLON ;
T_ID child
T_MINUS -
T_GREATER >
T_ID left
T_ASSIGN =
T_ID node
T_SEMI_COLON ;
T_IF if
T_OPEN_P (
T_ID tree
T_MINUS -
T_GREATER >
T_ID root
T_EQUAL ==
T_ID node
T_CLOSE_P )
T_ID tree
T_MINUS -
T_GREATER >
T_ID root
T_ASSIGN =
T_ID child
T_SEMI_COLON ;
T_ELSE else
T_IF if
T_OPEN_P (
T_ID child
T_MINUS -
T_GREATER >
T_ID up
T_MINUS -
T_GREATER >
T_ID left
T_EQUAL ==
T_ID node
T_CLOSE_P )
T_ID child
T_MINUS -
T_GREATER >
T_ID up
T_MINUS -
T_GREATER >
T_ID left
T_ASSIGN =
T_ID child
T_SEMI_COLON ;
T_ELSE else
T_ID child
T_MINUS -
T_GREATER >
T_ID up
T_MINUS -
T_GREATER >
T_ID right
T_ASSIGN =
T_ID child
T_SEMI_COLON ;
T_CLOSE_K }
T_VOID void
T_ID _rotate_right
T_OPEN_P (
T_ID rb_tree_t
T_ASTERISK *
T_ID tree
T_COMMA ,
T_ID rb_node_t
T_ASTERISK *
T_ID node
T_CLOSE_P )
T_OPEN_K {
T_ID rb_node_t
T_ASTERISK *
T_ID child
T_SEMI_COLON ;
T_ID child
T_ASSIGN =
T_ID node
T_MINUS -
T_GREATER >
T_ID left
T_SEMI_COLON ;
T_ID child
T_MINUS -
T_GREATER >
T_ID up
T_ASSIGN =
T_ID node
T_MINUS -
T_GREATER >
T_ID up
T_SEMI_COLON ;
T_ID node
T_MINUS -
T_GREATER >
T_ID up
T_ASSIGN =
T_ID child
T_SEMI_COLON ;
T_ID node
T_MINUS -
T_GREATER >
T_ID left
T_ASSIGN =
T_ID child
T_MINUS -
T_GREATER >
T_ID right
T_SEMI_COLON ;
T_ID child
T_MINUS -
T_GREATER >
T_ID right
T_ASSIGN =
T_ID node
T_SEMI_COLON ;
T_IF if
T_OPEN_P (
T_ID tree
T_MINUS -
T_GREATER >
T_ID root
T_EQUAL ==
T_ID node
T_CLOSE_P )
T_ID tree
T_MINUS -
T_GREATER >
T_ID root
T_ASSIGN =
T_ID child
T_SEMI_COLON ;
T_ELSE else
T_IF if
T_OPEN_P (
T_ID child
T_MINUS -
T_GREATER >
T_ID up
T_MINUS -
T_GREATER >
T_ID left
T_EQUAL ==
T_ID node
T_CLOSE_P )
T_ID child
T_MINUS -
T_GREATER >
T_ID up
T_MINUS -
T_GREATER >
T_ID left
T_ASSIGN =
T_ID child
T_SEMI_COLON ;
T_ELSE else
T_ID child
T_MINUS -
T_GREATER >
T_ID up
T_MINUS -
T_GREATER >
T_ID right
T_ASSIGN =
T_ID child
T_SEMI_COLON ;
T_CLOSE_K }
T_ID rb_node_t
T_ASTERISK *
T_ID _uncle_get
T_OPEN_P (
T_ID rb_node_t
T_ASTERISK *
T_ID node
T_COMMA ,
T_CHAR char
T_ASTERISK *
T_ID right_side
T_CLOSE_P )
T_OPEN_K {
T_ID rb_node_t
T_ASTERISK *
T_ID parent
T_ASSIGN =
T_ID node
T_MINUS -
T_GREATER >
T_ID up
T_SEMI_COLON ;
T_ID rb_node_t
T_ASTERISK *
T_ID grandparent
T_ASSIGN =
T_ID parent
T_MINUS -
T_GREATER >
T_ID up
T_SEMI_COLON ;
T_ID rb_node_t
T_ASTERISK *
T_ID uncle
T_SEMI_COLON ;
T_IF if
T_OPEN_P (
T_ID grandparent
T_EQUAL ==
T_NUM 0
T_CLOSE_P )
T_RETURN return
T_NUM 0
T_SEMI_COLON ;
T_IF if
T_OPEN_P (
T_ID grandparent
T_MINUS -
T_GREATER >
T_ID left
T_EQUAL ==
T_ID parent
T_CLOSE_P )
T_OPEN_K {
T_ID uncle
T_ASSIGN =
T_ID grandparent
T_MINUS -
T_GREATER >
T_ID right
T_SEMI_COLON ;
T_ID right_side
T_ASSIGN =
T_NUM 1
T_SEMI_COLON ;
T_CLOSE_K }
T_ELSE else
T_OPEN_K {
T_ID uncle
T_ASSIGN =
T_ID grandparent
T_MINUS -
T_GREATER >
T_ID left
T_SEMI_COLON ;
T_ID right_side
T_ASSIGN =
T_NUM 0
T_SEMI_COLON ;
T_CLOSE_K }
T_RETURN return
T_ID uncle
T_SEMI_COLON ;
T_CLOSE_K }
T_ENUM enum
T_ID _color_case
T_OPEN_K {
T_ID RB_LEFT_LEFT
T_COMMA ,
T_ID RB_LEFT_RIGHT
T_COMMA ,
T_ID RB_RIGHT_LEFT
T_COMMA ,
T_ID RB_RIGHT_RIGHT
T_COMMA ,
T_ID RB_END
T_COMMA ,
T_CLOSE_K }
T_SEMI_COLON ;
T_VOID void
T_ID _swap_colors
T_OPEN_P (
T_ID rb_tree_t
T_ASTERISK *
T_ID node1
T_COMMA ,
T_ID rb_tree_t
T_ASTERISK *
T_ID node2
T_CLOSE_P )
T_OPEN_K {
T_ENUM enum
T_ID tb_color
T_ID color
T_SEMI_COLON ;
T_ID color
T_ASSIGN =
T_ID node1
T_MINUS -
T_GREATER >
T_ID color
T_SEMI_COLON ;
T_ID node1
T_MINUS -
T_GREATER >
T_ID color
T_ASSIGN =
T_ID node2
T_MINUS -
T_GREATER >
T_ID color
T_SEMI_COLON ;
T_ID node2
T_MINUS -
T_GREATER >
T_ID color
T_ASSIGN =
T_ID color
T_SEMI_COLON ;
T_CLOSE_K }
T_VOID void
T_ID _re_color
T_OPEN_P (
T_ID rb_tree_t
T_ASTERISK *
T_ID tree
T_COMMA ,
T_ID rb_node_t
T_ASTERISK *
T_ID node
T_CLOSE_P )
T_OPEN_K {
T_ID rb_node_t
T_ASTERISK *
T_ID uncle
T_SEMI_COLON ;
T_ID rb_node_t
T_ASTERISK *
T_ID parent
T_ASSIGN =
T_ID node
T_MINUS -
T_GREATER >
T_ID up
T_SEMI_COLON ;
T_ID rb_node_t
T_ASTERISK *
T_ID grandparent
T_ASSIGN =
T_ID parent
T_MINUS -
T_GREATER >
T_ID up
T_SEMI_COLON ;
T_INT int
T_ID uncle_right
T_SEMI_COLON ;
T_INT int
T_ID parent_right
T_SEMI_COLON ;
T_ENUM enum
T_ID _color_case
T_ID color_case
T_SEMI_COLON ;
T_IF if
T_OPEN_P (
T_OPEN_P (
T_ID tree
T_MINUS -
T_GREATER >
T_ID root
T_EQUAL ==
T_ID node
T_CLOSE_P )
T_OR ||
T_OPEN_P (
T_ID node
T_MINUS -
T_GREATER >
T_ID up
T_MINUS -
T_GREATER >
T_ID color
T_DIFFERENT !=
T_ID RB_BLACK
T_CLOSE_P )
T_CLOSE_P )
T_RETURN return
T_SEMI_COLON ;
T_ID uncle
T_ASSIGN =
T_ID _uncle_get
T_OPEN_P (
T_ID node
T_AMPERSAND &
T_ID uncle_right
T_CLOSE_P )
T_SEMI_COLON ;
T_IF if
T_OPEN_P (
T_ID uncle
T_EQUAL ==
T_NUM 0
T_CLOSE_P )
T_RETURN return
T_SEMI_COLON ;
T_IF if
T_OPEN_P (
T_ID uncle
T_MINUS -
T_GREATER >
T_ID color
T_EQUAL ==
T_ID RB_RED
T_CLOSE_P )
T_OPEN_K {
T_ID node
T_MINUS -
T_GREATER >
T_ID up
T_MINUS -
T_GREATER >
T_ID color
T_ASSIGN =
T_ID RB_BLACK
T_SEMI_COLON ;
T_ID uncle
T_ASSIGN =
T_ID RB_BLACK
T_SEMI_COLON ;
T_ID node
T_MINUS -
T_GREATER >
T_ID up
T_MINUS -
T_GREATER >
T_ID up
T_MINUS -
T_GREATER >
T_ID color
T_ASSIGN =
T_ID RB_RED
T_SEMI_COLON ;
T_ID _re_color
T_OPEN_P (
T_ID tree
T_COMMA ,
T_ID node
T_MINUS -
T_GREATER >
T_ID up
T_MINUS -
T_GREATER >
T_ID up
T_CLOSE_P )
T_SEMI_COLON ;
T_CLOSE_K }
T_ELSE else
T_OPEN_K {
T_IF if
T_OPEN_P (
T_ID node
T_MINUS -
T_GREATER >
T_ID up
T_MINUS -
T_GREATER >
T_ID left
T_EQUAL ==
T_ID node
T_CLOSE_P )
T_ID parent_right
T_ASSIGN =
T_NUM 0
T_SEMI_COLON ;
T_ELSE else
T_ID parent_right
T_ASSIGN =
T_NUM 1
T_SEMI_COLON ;
T_IF if
T_OPEN_P (
T_ID parent_right
T_CLOSE_P )
T_OPEN_K {
T_IF if
T_OPEN_P (
T_ID uncle_right
T_CLOSE_P )
T_ID color_case
T_ASSIGN =
T_ID RB_RIGHT_RIGHT
T_SEMI_COLON ;
T_ELSE else
T_ID color_case
T_ASSIGN =
T_ID RB_LEFT_RIGHT
T_SEMI_COLON ;
T_CLOSE_K }
T_ELSE else
T_OPEN_K {
T_IF if
T_OPEN_P (
T_ID uncle_right
T_CLOSE_P )
T_ID color_case
T_ASSIGN =
T_ID RB_RIGHT_LEFT
T_SEMI_COLON ;
T_ELSE else
T_ID color_case
T_ASSIGN =
T_ID RB_LEFT_LEFT
T_SEMI_COLON ;
T_CLOSE_K }
T_CLOSE_K }
T_ID do
T_OPEN_K {
T_SWITCH switch
T_OPEN_P (
T_ID color_case
T_CLOSE_P )
T_OPEN_K {
T_CASE case
T_ID RB_LEFT_LEFT
T_COLON :
T_ID _rotate_right
T_OPEN_P (
T_ID tree
T_COMMA ,
T_ID grandparent
T_CLOSE_P )
T_SEMI_COLON ;
T_ID _swap_colors
T_OPEN_P (
T_ID grandparent
T_COMMA ,
T_ID parent
T_CLOSE_P )
T_SEMI_COLON ;
T_ID color_case
T_ASSIGN =
T_ID RB_END
T_SEMI_COLON ;
T_BREAK break
T_SEMI_COLON ;
T_CASE case
T_ID RB_LEFT_RIGHT
T_COLON :
T_ID _rotate_left
T_OPEN_P (
T_ID tree
T_COMMA ,
T_ID parent
T_CLOSE_P )
T_SEMI_COLON ;
T_ID color_case
T_ASSIGN =
T_ID RB_LEFT_LEFT
T_SEMI_COLON ;
T_BREAK break
T_SEMI_COLON ;
T_CASE case
T_ID RB_RIGHT_RIGHT
T_COLON :
T_ID _rotate_left
T_OPEN_P (
T_ID tree
T_COMMA ,
T_ID grandparent
T_CLOSE_P )
T_SEMI_COLON ;
T_ID _swap_colors
T_OPEN_P (
T_ID grandparent
T_COMMA ,
T_ID parent
T_CLOSE_P )
T_SEMI_COLON ;
T_ID color_case
T_ASSIGN =
T_ID RB_END
T_SEMI_COLON ;
T_BREAK break
T_SEMI_COLON ;
T_ID default
T_COLON :
T_ID _rotate_right
T_OPEN_P (
T_ID tree
T_COMMA ,
T_ID parent
T_CLOSE_P )
T_SEMI_COLON ;
T_ID color_case
T_ASSIGN =
T_ID RB_RIGHT_RIGHT
T_SEMI_COLON ;
T_BREAK break
T_SEMI_COLON ;
T_CLOSE_K }
T_CLOSE_K }
T_WHILE while
T_OPEN_P (
T_ID color_case
T_DIFFERENT !=
T_ID RB_END
T_CLOSE_P )
T_CLOSE_K }
T_VOID void
T_ID rb_insert
T_OPEN_P (
T_ID rb_tree_t
T_ASTERISK *
T_ID tree
T_COMMA ,
T_ID rb_node_t
T_ASTERISK *
T_ID node
T_COMMA ,
T_LONG long
T_INT int
T_ID INTvalue
T_CLOSE_P )
T_OPEN_K {
T_ID _insert_simple
T_OPEN_P (
T_ID tree
T_COMMA ,
T_ID node
T_COMMA ,
T_ID INTvalue
T_CLOSE_P )
T_SEMI_COLON ;
T_ID _re_color
T_OPEN_P (
T_ID tree
T_COMMA ,
T_ID node
T_CLOSE_P )
T_SEMI_COLON ;
T_CLOSE_K }
T_EOF 
lines:200
1c1
< T_ENUM
---
> T_ENUM enum
3c3
< T_OPEN_K
---
> T_OPEN_K {
5c5
< T_COMMA
---
> T_COMMA ,
7,9c7,9
< T_CLOSE_K
< T_SEMI_COLON
< T_STRUCT
---
> T_CLOSE_K }
> T_SEMI_COLON ;
> T_STRUCT struct
11,12c11,12
< T_OPEN_K
< T_STRUCT
---
> T_OPEN_K {
> T_STRUCT struct
14c14
< T_ASTERISK
---
> T_ASTERISK *
16,17c16,17
< T_COMMA
< T_ASTERISK
---
> T_COMMA ,
> T_ASTERISK *
19,20c19,20
< T_COMMA
< T_ASTERISK
---
> T_COMMA ,
> T_ASTERISK *
22,24c22,24
< T_SEMI_COLON
< T_LONG
< T_INT
---
> T_SEMI_COLON ;
> T_LONG long
> T_INT int
26,27c26,27
< T_SEMI_COLON
< T_ENUM
---
> T_SEMI_COLON ;
> T_ENUM enum
30,34c30,34
< T_SEMI_COLON
< T_CLOSE_K
< T_SEMI_COLON
< T_TYPEDEF
< T_STRUCT
---
> T_SEMI_COLON ;
> T_CLOSE_K }
> T_SEMI_COLON ;
> T_TYPEDEF typedef
> T_STRUCT struct
37,38c37,38
< T_SEMI_COLON
< T_STRUCT
---
> T_SEMI_COLON ;
> T_STRUCT struct
40,41c40,41
< T_OPEN_K
< T_STRUCT
---
> T_OPEN_K {
> T_STRUCT struct
43c43
< T_ASTERISK
---
> T_ASTERISK *
45c45
< T_SEMI_COLON
---
> T_SEMI_COLON ;
47c47
< T_INT
---
> T_INT int
49,53c49,53
< T_SEMI_COLON
< T_CLOSE_K
< T_SEMI_COLON
< T_TYPEDEF
< T_STRUCT
---
> T_SEMI_COLON ;
> T_CLOSE_K }
> T_SEMI_COLON ;
> T_TYPEDEF typedef
> T_STRUCT struct
56,57c56,57
< T_SEMI_COLON
< T_VOID
---
> T_SEMI_COLON ;
> T_VOID void
59c59
< T_OPEN_P
---
> T_OPEN_P (
61c61
< T_ASTERISK
---
> T_ASTERISK *
63c63
< T_COMMA
---
> T_COMMA ,
65c65
< T_ASTERISK
---
> T_ASTERISK *
67,69c67,69
< T_COMMA
< T_LONG
< T_INT
---
> T_COMMA ,
> T_LONG long
> T_INT int
71,72c71,72
< T_CLOSE_P
< T_OPEN_K
---
> T_CLOSE_P )
> T_OPEN_K {
74c74
< T_ASTERISK
---
> T_ASTERISK *
76c76
< T_SEMI_COLON
---
> T_SEMI_COLON ;
78,79c78,79
< T_MINUS
< T_GREATER
---
> T_MINUS -
> T_GREATER >
81,83c81,83
< T_PLUS
< T_PLUS
< T_SEMI_COLON
---
> T_PLUS +
> T_PLUS +
> T_SEMI_COLON ;
85,86c85,86
< T_MINUS
< T_GREATER
---
> T_MINUS -
> T_GREATER >
88c88
< T_ASSIGN
---
> T_ASSIGN =
90c90
< T_SEMI_COLON
---
> T_SEMI_COLON ;
92,93c92,93
< T_MINUS
< T_GREATER
---
> T_MINUS -
> T_GREATER >
95c95
< T_ASSIGN
---
> T_ASSIGN =
97c97
< T_SEMI_COLON
---
> T_SEMI_COLON ;
99,100c99,100
< T_MINUS
< T_GREATER
---
> T_MINUS -
> T_GREATER >
102c102
< T_ASSIGN
---
> T_ASSIGN =
104c104
< T_SEMI_COLON
---
> T_SEMI_COLON ;
106,107c106,107
< T_MINUS
< T_GREATER
---
> T_MINUS -
> T_GREATER >
109c109
< T_ASSIGN
---
> T_ASSIGN =
111,113c111,113
< T_SEMI_COLON
< T_IF
< T_OPEN_P
---
> T_SEMI_COLON ;
> T_IF if
> T_OPEN_P (
115,116c115,116
< T_MINUS
< T_GREATER
---
> T_MINUS -
> T_GREATER >
118c118
< T_EQUAL
---
> T_EQUAL ==
120,121c120,121
< T_CLOSE_P
< T_OPEN_K
---
> T_CLOSE_P )
> T_OPEN_K {
123,124c123,124
< T_MINUS
< T_GREATER
---
> T_MINUS -
> T_GREATER >
126c126
< T_ASSIGN
---
> T_ASSIGN =
128c128
< T_SEMI_COLON
---
> T_SEMI_COLON ;
130,131c130,131
< T_MINUS
< T_GREATER
---
> T_MINUS -
> T_GREATER >
133c133
< T_ASSIGN
---
> T_ASSIGN =
135,138c135,138
< T_SEMI_COLON
< T_RETURN
< T_SEMI_COLON
< T_CLOSE_K
---
> T_SEMI_COLON ;
> T_RETURN return
> T_SEMI_COLON ;
> T_CLOSE_K }
140,141c140,141
< T_MINUS
< T_GREATER
---
> T_MINUS -
> T_GREATER >
143c143
< T_ASSIGN
---
> T_ASSIGN =
145c145
< T_SEMI_COLON
---
> T_SEMI_COLON ;
147c147
< T_ASSIGN
---
> T_ASSIGN =
149,150c149,150
< T_MINUS
< T_GREATER
---
> T_MINUS -
> T_GREATER >
152,164c152,164
< T_SEMI_COLON
< T_WHILE
< T_OPEN_P
< T_ID new_node
< T_MINUS
< T_GREATER
< T_ID up
< T_EQUAL
< T_NUM 0
< T_CLOSE_P
< T_OPEN_K
< T_IF
< T_OPEN_P
---
> T_SEMI_COLON ;
> T_WHILE while
> T_OPEN_P (
> T_ID new_node
> T_MINUS -
> T_GREATER >
> T_ID up
> T_EQUAL ==
> T_NUM 0
> T_CLOSE_P )
> T_OPEN_K {
> T_IF if
> T_OPEN_P (
166,167c166,167
< T_MINUS
< T_GREATER
---
> T_MINUS -
> T_GREATER >
169c169
< T_GREATER
---
> T_GREATER >
171,174c171,174
< T_CLOSE_P
< T_OPEN_K
< T_IF
< T_OPEN_P
---
> T_CLOSE_P )
> T_OPEN_K {
> T_IF if
> T_OPEN_P (
176,177c176,177
< T_MINUS
< T_GREATER
---
> T_MINUS -
> T_GREATER >
179c179
< T_EQUAL
---
> T_EQUAL ==
181,182c181,182
< T_CLOSE_P
< T_OPEN_K
---
> T_CLOSE_P )
> T_OPEN_K {
184,185c184,185
< T_MINUS
< T_GREATER
---
> T_MINUS -
> T_GREATER >
187c187
< T_ASSIGN
---
> T_ASSIGN =
189c189
< T_SEMI_COLON
---
> T_SEMI_COLON ;
191,192c191,192
< T_MINUS
< T_GREATER
---
> T_MINUS -
> T_GREATER >
194c194
< T_ASSIGN
---
> T_ASSIGN =
196,198c196,198
< T_SEMI_COLON
< T_CLOSE_K
< T_ELSE
---
> T_SEMI_COLON ;
> T_CLOSE_K }
> T_ELSE else
200c200
< T_ASSIGN
---
> T_ASSIGN =
202,203c202,203
< T_MINUS
< T_GREATER
---
> T_MINUS -
> T_GREATER >
205,210c205,210
< T_SEMI_COLON
< T_CLOSE_K
< T_ELSE
< T_OPEN_K
< T_IF
< T_OPEN_P
---
> T_SEMI_COLON ;
> T_CLOSE_K }
> T_ELSE else
> T_OPEN_K {
> T_IF if
> T_OPEN_P (
212,213c212,213
< T_MINUS
< T_GREATER
---
> T_MINUS -
> T_GREATER >
215c215
< T_EQUAL
---
> T_EQUAL ==
217,218c217,218
< T_CLOSE_P
< T_OPEN_K
---
> T_CLOSE_P )
> T_OPEN_K {
220,221c220,221
< T_MINUS
< T_GREATER
---
> T_MINUS -
> T_GREATER >
223c223
< T_ASSIGN
---
> T_ASSIGN =
225c225
< T_SEMI_COLON
---
> T_SEMI_COLON ;
227,228c227,228
< T_MINUS
< T_GREATER
---
> T_MINUS -
> T_GREATER >
230c230
< T_ASSIGN
---
> T_ASSIGN =
232,234c232,234
< T_SEMI_COLON
< T_CLOSE_K
< T_ELSE
---
> T_SEMI_COLON ;
> T_CLOSE_K }
> T_ELSE else
236c236
< T_ASSIGN
---
> T_ASSIGN =
238,239c238,239
< T_MINUS
< T_GREATER
---
> T_MINUS -
> T_GREATER >
241,245c241,245
< T_SEMI_COLON
< T_CLOSE_K
< T_CLOSE_K
< T_CLOSE_K
< T_VOID
---
> T_SEMI_COLON ;
> T_CLOSE_K }
> T_CLOSE_K }
> T_CLOSE_K }
> T_VOID void
247c247
< T_OPEN_P
---
> T_OPEN_P (
249c249
< T_ASTERISK
---
> T_ASTERISK *
251c251
< T_COMMA
---
> T_COMMA ,
253c253
< T_ASTERISK
---
> T_ASTERISK *
255,256c255,256
< T_CLOSE_P
< T_OPEN_K
---
> T_CLOSE_P )
> T_OPEN_K {
258c258
< T_ASTERISK
---
> T_ASTERISK *
260c260
< T_SEMI_COLON
---
> T_SEMI_COLON ;
262c262
< T_ASSIGN
---
> T_ASSIGN =
264,265c264,265
< T_MINUS
< T_GREATER
---
> T_MINUS -
> T_GREATER >
267c267
< T_SEMI_COLON
---
> T_SEMI_COLON ;
269,270c269,270
< T_MINUS
< T_GREATER
---
> T_MINUS -
> T_GREATER >
272c272
< T_ASSIGN
---
> T_ASSIGN =
274,275c274,275
< T_MINUS
< T_GREATER
---
> T_MINUS -
> T_GREATER >
277c277
< T_SEMI_COLON
---
> T_SEMI_COLON ;
279,280c279,280
< T_MINUS
< T_GREATER
---
> T_MINUS -
> T_GREATER >
282c282
< T_ASSIGN
---
> T_ASSIGN =
284c284
< T_SEMI_COLON
---
> T_SEMI_COLON ;
286,287c286,287
< T_MINUS
< T_GREATER
---
> T_MINUS -
> T_GREATER >
289c289
< T_ASSIGN
---
> T_ASSIGN =
291,292c291,292
< T_MINUS
< T_GREATER
---
> T_MINUS -
> T_GREATER >
294c294
< T_SEMI_COLON
---
> T_SEMI_COLON ;
296,297c296,297
< T_MINUS
< T_GREATER
---
> T_MINUS -
> T_GREATER >
299c299
< T_ASSIGN
---
> T_ASSIGN =
301,303c301,303
< T_SEMI_COLON
< T_IF
< T_OPEN_P
---
> T_SEMI_COLON ;
> T_IF if
> T_OPEN_P (
305,306c305,306
< T_MINUS
< T_GREATER
---
> T_MINUS -
> T_GREATER >
308c308
< T_EQUAL
---
> T_EQUAL ==
310c310
< T_CLOSE_P
---
> T_CLOSE_P )
312,313c312,313
< T_MINUS
< T_GREATER
---
> T_MINUS -
> T_GREATER >
315c315
< T_ASSIGN
---
> T_ASSIGN =
317,320c317,320
< T_SEMI_COLON
< T_ELSE
< T_IF
< T_OPEN_P
---
> T_SEMI_COLON ;
> T_ELSE else
> T_IF if
> T_OPEN_P (
322,323c322,323
< T_MINUS
< T_GREATER
---
> T_MINUS -
> T_GREATER >
325,326c325,326
< T_MINUS
< T_GREATER
---
> T_MINUS -
> T_GREATER >
328c328
< T_EQUAL
---
> T_EQUAL ==
330c330
< T_CLOSE_P
---
> T_CLOSE_P )
332,333c332,333
< T_MINUS
< T_GREATER
---
> T_MINUS -
> T_GREATER >
335,336c335,336
< T_MINUS
< T_GREATER
---
> T_MINUS -
> T_GREATER >
338c338
< T_ASSIGN
---
> T_ASSIGN =
340,341c340,341
< T_SEMI_COLON
< T_ELSE
---
> T_SEMI_COLON ;
> T_ELSE else
343,344c343,344
< T_MINUS
< T_GREATER
---
> T_MINUS -
> T_GREATER >
346,347c346,347
< T_MINUS
< T_GREATER
---
> T_MINUS -
> T_GREATER >
349c349
< T_ASSIGN
---
> T_ASSIGN =
351,353c351,353
< T_SEMI_COLON
< T_CLOSE_K
< T_VOID
---
> T_SEMI_COLON ;
> T_CLOSE_K }
> T_VOID void
355c355
< T_OPEN_P
---
> T_OPEN_P (
357c357
< T_ASTERISK
---
> T_ASTERISK *
359c359
< T_COMMA
---
> T_COMMA ,
361c361
< T_ASTERISK
---
> T_ASTERISK *
363,364c363,364
< T_CLOSE_P
< T_OPEN_K
---
> T_CLOSE_P )
> T_OPEN_K {
366c366
< T_ASTERISK
---
> T_ASTERISK *
368c368
< T_SEMI_COLON
---
> T_SEMI_COLON ;
370c370
< T_ASSIGN
---
> T_ASSIGN =
372,373c372,373
< T_MINUS
< T_GREATER
---
> T_MINUS -
> T_GREATER >
375c375
< T_SEMI_COLON
---
> T_SEMI_COLON ;
377,378c377,378
< T_MINUS
< T_GREATER
---
> T_MINUS -
> T_GREATER >
380c380
< T_ASSIGN
---
> T_ASSIGN =
382,383c382,383
< T_MINUS
< T_GREATER
---
> T_MINUS -
> T_GREATER >
385c385
< T_SEMI_COLON
---
> T_SEMI_COLON ;
387,388c387,388
< T_MINUS
< T_GREATER
---
> T_MINUS -
> T_GREATER >
390c390
< T_ASSIGN
---
> T_ASSIGN =
392c392
< T_SEMI_COLON
---
> T_SEMI_COLON ;
394,395c394,395
< T_MINUS
< T_GREATER
---
> T_MINUS -
> T_GREATER >
397c397
< T_ASSIGN
---
> T_ASSIGN =
399,400c399,400
< T_MINUS
< T_GREATER
---
> T_MINUS -
> T_GREATER >
402c402
< T_SEMI_COLON
---
> T_SEMI_COLON ;
404,405c404,405
< T_MINUS
< T_GREATER
---
> T_MINUS -
> T_GREATER >
407c407
< T_ASSIGN
---
> T_ASSIGN =
409,411c409,411
< T_SEMI_COLON
< T_IF
< T_OPEN_P
---
> T_SEMI_COLON ;
> T_IF if
> T_OPEN_P (
413,414c413,414
< T_MINUS
< T_GREATER
---
> T_MINUS -
> T_GREATER >
416c416
< T_EQUAL
---
> T_EQUAL ==
418c418
< T_CLOSE_P
---
> T_CLOSE_P )
420,421c420,421
< T_MINUS
< T_GREATER
---
> T_MINUS -
> T_GREATER >
423c423
< T_ASSIGN
---
> T_ASSIGN =
425,428c425,428
< T_SEMI_COLON
< T_ELSE
< T_IF
< T_OPEN_P
---
> T_SEMI_COLON ;
> T_ELSE else
> T_IF if
> T_OPEN_P (
430,431c430,431
< T_MINUS
< T_GREATER
---
> T_MINUS -
> T_GREATER >
433,434c433,434
< T_MINUS
< T_GREATER
---
> T_MINUS -
> T_GREATER >
436c436
< T_EQUAL
---
> T_EQUAL ==
438c438
< T_CLOSE_P
---
> T_CLOSE_P )
440,441c440,441
< T_MINUS
< T_GREATER
---
> T_MINUS -
> T_GREATER >
443,444c443,444
< T_MINUS
< T_GREATER
---
> T_MINUS -
> T_GREATER >
446c446
< T_ASSIGN
---
> T_ASSIGN =
448,449c448,449
< T_SEMI_COLON
< T_ELSE
---
> T_SEMI_COLON ;
> T_ELSE else
451,452c451,452
< T_MINUS
< T_GREATER
---
> T_MINUS -
> T_GREATER >
454,455c454,455
< T_MINUS
< T_GREATER
---
> T_MINUS -
> T_GREATER >
457c457
< T_ASSIGN
---
> T_ASSIGN =
459,460c459,460
< T_SEMI_COLON
< T_CLOSE_K
---
> T_SEMI_COLON ;
> T_CLOSE_K }
462c462
< T_ASTERISK
---
> T_ASTERISK *
464c464
< T_OPEN_P
---
> T_OPEN_P (
466c466
< T_ASTERISK
---
> T_ASTERISK *
468,470c468,470
< T_COMMA
< T_CHAR
< T_ASTERISK
---
> T_COMMA ,
> T_CHAR char
> T_ASTERISK *
472,473c472,473
< T_CLOSE_P
< T_OPEN_K
---
> T_CLOSE_P )
> T_OPEN_K {
475c475
< T_ASTERISK
---
> T_ASTERISK *
477c477
< T_ASSIGN
---
> T_ASSIGN =
479,480c479,480
< T_MINUS
< T_GREATER
---
> T_MINUS -
> T_GREATER >
482c482
< T_SEMI_COLON
---
> T_SEMI_COLON ;
484c484
< T_ASTERISK
---
> T_ASTERISK *
486c486
< T_ASSIGN
---
> T_ASSIGN =
488,489c488,489
< T_MINUS
< T_GREATER
---
> T_MINUS -
> T_GREATER >
491c491
< T_SEMI_COLON
---
> T_SEMI_COLON ;
493c493
< T_ASTERISK
---
> T_ASTERISK *
495,497c495,497
< T_SEMI_COLON
< T_IF
< T_OPEN_P
---
> T_SEMI_COLON ;
> T_IF if
> T_OPEN_P (
499c499
< T_EQUAL
---
> T_EQUAL ==
501,502c501,502
< T_CLOSE_P
< T_RETURN
---
> T_CLOSE_P )
> T_RETURN return
504,506c504,506
< T_SEMI_COLON
< T_IF
< T_OPEN_P
---
> T_SEMI_COLON ;
> T_IF if
> T_OPEN_P (
508,509c508,509
< T_MINUS
< T_GREATER
---
> T_MINUS -
> T_GREATER >
511c511
< T_EQUAL
---
> T_EQUAL ==
513,514c513,514
< T_CLOSE_P
< T_OPEN_K
---
> T_CLOSE_P )
> T_OPEN_K {
516c516
< T_ASSIGN
---
> T_ASSIGN =
518,519c518,519
< T_MINUS
< T_GREATER
---
> T_MINUS -
> T_GREATER >
521c521
< T_SEMI_COLON
---
> T_SEMI_COLON ;
523c523
< T_ASSIGN
---
> T_ASSIGN =
525,528c525,528
< T_SEMI_COLON
< T_CLOSE_K
< T_ELSE
< T_OPEN_K
---
> T_SEMI_COLON ;
> T_CLOSE_K }
> T_ELSE else
> T_OPEN_K {
530c530
< T_ASSIGN
---
> T_ASSIGN =
532,533c532,533
< T_MINUS
< T_GREATER
---
> T_MINUS -
> T_GREATER >
535c535
< T_SEMI_COLON
---
> T_SEMI_COLON ;
537c537
< T_ASSIGN
---
> T_ASSIGN =
539,541c539,541
< T_SEMI_COLON
< T_CLOSE_K
< T_RETURN
---
> T_SEMI_COLON ;
> T_CLOSE_K }
> T_RETURN return
543,545c543,545
< T_SEMI_COLON
< T_CLOSE_K
< T_ENUM
---
> T_SEMI_COLON ;
> T_CLOSE_K }
> T_ENUM enum
547c547
< T_OPEN_K
---
> T_OPEN_K {
549c549
< T_COMMA
---
> T_COMMA ,
551c551
< T_COMMA
---
> T_COMMA ,
553c553
< T_COMMA
---
> T_COMMA ,
555c555
< T_COMMA
---
> T_COMMA ,
557,560c557,560
< T_COMMA
< T_CLOSE_K
< T_SEMI_COLON
< T_VOID
---
> T_COMMA ,
> T_CLOSE_K }
> T_SEMI_COLON ;
> T_VOID void
562c562
< T_OPEN_P
---
> T_OPEN_P (
564c564
< T_ASTERISK
---
> T_ASTERISK *
566c566
< T_COMMA
---
> T_COMMA ,
568c568
< T_ASTERISK
---
> T_ASTERISK *
570,572c570,572
< T_CLOSE_P
< T_OPEN_K
< T_ENUM
---
> T_CLOSE_P )
> T_OPEN_K {
> T_ENUM enum
575c575
< T_SEMI_COLON
---
> T_SEMI_COLON ;
577c577
< T_ASSIGN
---
> T_ASSIGN =
579,580c579,580
< T_MINUS
< T_GREATER
---
> T_MINUS -
> T_GREATER >
582c582
< T_SEMI_COLON
---
> T_SEMI_COLON ;
584,585c584,585
< T_MINUS
< T_GREATER
---
> T_MINUS -
> T_GREATER >
587c587
< T_ASSIGN
---
> T_ASSIGN =
589,590c589,590
< T_MINUS
< T_GREATER
---
> T_MINUS -
> T_GREATER >
592c592
< T_SEMI_COLON
---
> T_SEMI_COLON ;
594,595c594,595
< T_MINUS
< T_GREATER
---
> T_MINUS -
> T_GREATER >
597c597
< T_ASSIGN
---
> T_ASSIGN =
599,601c599,601
< T_SEMI_COLON
< T_CLOSE_K
< T_VOID
---
> T_SEMI_COLON ;
> T_CLOSE_K }
> T_VOID void
603c603
< T_OPEN_P
---
> T_OPEN_P (
605c605
< T_ASTERISK
---
> T_ASTERISK *
607c607
< T_COMMA
---
> T_COMMA ,
609c609
< T_ASTERISK
---
> T_ASTERISK *
611,612c611,612
< T_CLOSE_P
< T_OPEN_K
---
> T_CLOSE_P )
> T_OPEN_K {
614c614
< T_ASTERISK
---
> T_ASTERISK *
616c616
< T_SEMI_COLON
---
> T_SEMI_COLON ;
618c618
< T_ASTERISK
---
> T_ASTERISK *
620c620
< T_ASSIGN
---
> T_ASSIGN =
622,623c622,623
< T_MINUS
< T_GREATER
---
> T_MINUS -
> T_GREATER >
625c625
< T_SEMI_COLON
---
> T_SEMI_COLON ;
627c627
< T_ASTERISK
---
> T_ASTERISK *
629c629
< T_ASSIGN
---
> T_ASSIGN =
631,632c631,632
< T_MINUS
< T_GREATER
---
> T_MINUS -
> T_GREATER >
634,635c634,635
< T_SEMI_COLON
< T_INT
---
> T_SEMI_COLON ;
> T_INT int
637,638c637,638
< T_SEMI_COLON
< T_INT
---
> T_SEMI_COLON ;
> T_INT int
640,641c640,641
< T_SEMI_COLON
< T_ENUM
---
> T_SEMI_COLON ;
> T_ENUM enum
644,647c644,647
< T_SEMI_COLON
< T_IF
< T_OPEN_P
< T_OPEN_P
---
> T_SEMI_COLON ;
> T_IF if
> T_OPEN_P (
> T_OPEN_P (
649,650c649,650
< T_MINUS
< T_GREATER
---
> T_MINUS -
> T_GREATER >
652c652
< T_EQUAL
---
> T_EQUAL ==
654,656c654,656
< T_CLOSE_P
< T_OR
< T_OPEN_P
---
> T_CLOSE_P )
> T_OR ||
> T_OPEN_P (
658,659c658,659
< T_MINUS
< T_GREATER
---
> T_MINUS -
> T_GREATER >
661,662c661,662
< T_MINUS
< T_GREATER
---
> T_MINUS -
> T_GREATER >
664c664
< T_DIFFERENT
---
> T_DIFFERENT !=
666,669c666,669
< T_CLOSE_P
< T_CLOSE_P
< T_RETURN
< T_SEMI_COLON
---
> T_CLOSE_P )
> T_CLOSE_P )
> T_RETURN return
> T_SEMI_COLON ;
671c671
< T_ASSIGN
---
> T_ASSIGN =
673c673
< T_OPEN_P
---
> T_OPEN_P (
675c675
< T_AMPERSAND
---
> T_AMPERSAND &
677,680c677,680
< T_CLOSE_P
< T_SEMI_COLON
< T_IF
< T_OPEN_P
---
> T_CLOSE_P )
> T_SEMI_COLON ;
> T_IF if
> T_OPEN_P (
682c682
< T_EQUAL
---
> T_EQUAL ==
684,688c684,688
< T_CLOSE_P
< T_RETURN
< T_SEMI_COLON
< T_IF
< T_OPEN_P
---
> T_CLOSE_P )
> T_RETURN return
> T_SEMI_COLON ;
> T_IF if
> T_OPEN_P (
690,691c690,691
< T_MINUS
< T_GREATER
---
> T_MINUS -
> T_GREATER >
693c693
< T_EQUAL
---
> T_EQUAL ==
695,696c695,696
< T_CLOSE_P
< T_OPEN_K
---
> T_CLOSE_P )
> T_OPEN_K {
698,699c698,699
< T_MINUS
< T_GREATER
---
> T_MINUS -
> T_GREATER >
701,702c701,702
< T_MINUS
< T_GREATER
---
> T_MINUS -
> T_GREATER >
704c704
< T_ASSIGN
---
> T_ASSIGN =
706c706
< T_SEMI_COLON
---
> T_SEMI_COLON ;
708c708
< T_ASSIGN
---
> T_ASSIGN =
710c710
< T_SEMI_COLON
---
> T_SEMI_COLON ;
712,713c712,713
< T_MINUS
< T_GREATER
---
> T_MINUS -
> T_GREATER >
715,716c715,716
< T_MINUS
< T_GREATER
---
> T_MINUS -
> T_GREATER >
718,719c718,719
< T_MINUS
< T_GREATER
---
> T_MINUS -
> T_GREATER >
721c721
< T_ASSIGN
---
> T_ASSIGN =
723c723
< T_SEMI_COLON
---
> T_SEMI_COLON ;
725c725
< T_OPEN_P
---
> T_OPEN_P (
727c727
< T_COMMA
---
> T_COMMA ,
729,730c729,730
< T_MINUS
< T_GREATER
---
> T_MINUS -
> T_GREATER >
732,733c732,733
< T_MINUS
< T_GREATER
---
> T_MINUS -
> T_GREATER >
735,741c735,741
< T_CLOSE_P
< T_SEMI_COLON
< T_CLOSE_K
< T_ELSE
< T_OPEN_K
< T_IF
< T_OPEN_P
---
> T_CLOSE_P )
> T_SEMI_COLON ;
> T_CLOSE_K }
> T_ELSE else
> T_OPEN_K {
> T_IF if
> T_OPEN_P (
743,744c743,744
< T_MINUS
< T_GREATER
---
> T_MINUS -
> T_GREATER >
746,747c746,747
< T_MINUS
< T_GREATER
---
> T_MINUS -
> T_GREATER >
749c749
< T_EQUAL
---
> T_EQUAL ==
751c751
< T_CLOSE_P
---
> T_CLOSE_P )
753c753
< T_ASSIGN
---
> T_ASSIGN =
755,756c755,756
< T_SEMI_COLON
< T_ELSE
---
> T_SEMI_COLON ;
> T_ELSE else
758c758
< T_ASSIGN
---
> T_ASSIGN =
760,762c760,762
< T_SEMI_COLON
< T_IF
< T_OPEN_P
---
> T_SEMI_COLON ;
> T_IF if
> T_OPEN_P (
764,767c764,767
< T_CLOSE_P
< T_OPEN_K
< T_IF
< T_OPEN_P
---
> T_CLOSE_P )
> T_OPEN_K {
> T_IF if
> T_OPEN_P (
769c769
< T_CLOSE_P
---
> T_CLOSE_P )
771c771
< T_ASSIGN
---
> T_ASSIGN =
773,774c773,774
< T_SEMI_COLON
< T_ELSE
---
> T_SEMI_COLON ;
> T_ELSE else
776c776
< T_ASSIGN
---
> T_ASSIGN =
778,783c778,783
< T_SEMI_COLON
< T_CLOSE_K
< T_ELSE
< T_OPEN_K
< T_IF
< T_OPEN_P
---
> T_SEMI_COLON ;
> T_CLOSE_K }
> T_ELSE else
> T_OPEN_K {
> T_IF if
> T_OPEN_P (
785c785
< T_CLOSE_P
---
> T_CLOSE_P )
787c787
< T_ASSIGN
---
> T_ASSIGN =
789,790c789,790
< T_SEMI_COLON
< T_ELSE
---
> T_SEMI_COLON ;
> T_ELSE else
792c792
< T_ASSIGN
---
> T_ASSIGN =
794,796c794,796
< T_SEMI_COLON
< T_CLOSE_K
< T_CLOSE_K
---
> T_SEMI_COLON ;
> T_CLOSE_K }
> T_CLOSE_K }
798,804c798,804
< T_OPEN_K
< T_SWITCH
< T_OPEN_P
< T_ID color_case
< T_CLOSE_P
< T_OPEN_K
< T_CASE
---
> T_OPEN_K {
> T_SWITCH switch
> T_OPEN_P (
> T_ID color_case
> T_CLOSE_P )
> T_OPEN_K {
> T_CASE case
806c806
< T_COLON
---
> T_COLON :
808c808
< T_OPEN_P
---
> T_OPEN_P (
810c810
< T_COMMA
---
> T_COMMA ,
812,813c812,813
< T_CLOSE_P
< T_SEMI_COLON
---
> T_CLOSE_P )
> T_SEMI_COLON ;
815c815
< T_OPEN_P
---
> T_OPEN_P (
817c817
< T_COMMA
---
> T_COMMA ,
819,820c819,820
< T_CLOSE_P
< T_SEMI_COLON
---
> T_CLOSE_P )
> T_SEMI_COLON ;
822c822
< T_ASSIGN
---
> T_ASSIGN =
824,827c824,827
< T_SEMI_COLON
< T_BREAK
< T_SEMI_COLON
< T_CASE
---
> T_SEMI_COLON ;
> T_BREAK break
> T_SEMI_COLON ;
> T_CASE case
829c829
< T_COLON
---
> T_COLON :
831c831
< T_OPEN_P
---
> T_OPEN_P (
833c833
< T_COMMA
---
> T_COMMA ,
835,836c835,836
< T_CLOSE_P
< T_SEMI_COLON
---
> T_CLOSE_P )
> T_SEMI_COLON ;
838c838
< T_ASSIGN
---
> T_ASSIGN =
840,843c840,843
< T_SEMI_COLON
< T_BREAK
< T_SEMI_COLON
< T_CASE
---
> T_SEMI_COLON ;
> T_BREAK break
> T_SEMI_COLON ;
> T_CASE case
845c845
< T_COLON
---
> T_COLON :
847c847
< T_OPEN_P
---
> T_OPEN_P (
849c849
< T_COMMA
---
> T_COMMA ,
851,852c851,852
< T_CLOSE_P
< T_SEMI_COLON
---
> T_CLOSE_P )
> T_SEMI_COLON ;
854c854
< T_OPEN_P
---
> T_OPEN_P (
856c856
< T_COMMA
---
> T_COMMA ,
858,859c858,859
< T_CLOSE_P
< T_SEMI_COLON
---
> T_CLOSE_P )
> T_SEMI_COLON ;
861c861
< T_ASSIGN
---
> T_ASSIGN =
863,865c863,865
< T_SEMI_COLON
< T_BREAK
< T_SEMI_COLON
---
> T_SEMI_COLON ;
> T_BREAK break
> T_SEMI_COLON ;
867c867
< T_COLON
---
> T_COLON :
869c869
< T_OPEN_P
---
> T_OPEN_P (
871c871
< T_COMMA
---
> T_COMMA ,
873,874c873,874
< T_CLOSE_P
< T_SEMI_COLON
---
> T_CLOSE_P )
> T_SEMI_COLON ;
876c876
< T_ASSIGN
---
> T_ASSIGN =
878,884c878,884
< T_SEMI_COLON
< T_BREAK
< T_SEMI_COLON
< T_CLOSE_K
< T_CLOSE_K
< T_WHILE
< T_OPEN_P
---
> T_SEMI_COLON ;
> T_BREAK break
> T_SEMI_COLON ;
> T_CLOSE_K }
> T_CLOSE_K }
> T_WHILE while
> T_OPEN_P (
886c886
< T_DIFFERENT
---
> T_DIFFERENT !=
888,890c888,890
< T_CLOSE_P
< T_CLOSE_K
< T_VOID
---
> T_CLOSE_P )
> T_CLOSE_K }
> T_VOID void
892c892
< T_OPEN_P
---
> T_OPEN_P (
894c894
< T_ASTERISK
---
> T_ASTERISK *
896c896
< T_COMMA
---
> T_COMMA ,
898c898
< T_ASTERISK
---
> T_ASTERISK *
900,902c900,902
< T_COMMA
< T_LONG
< T_INT
---
> T_COMMA ,
> T_LONG long
> T_INT int
904,905c904,905
< T_CLOSE_P
< T_OPEN_K
---
> T_CLOSE_P )
> T_OPEN_K {
907c907
< T_OPEN_P
---
> T_OPEN_P (
909c909
< T_COMMA
---
> T_COMMA ,
911c911
< T_COMMA
---
> T_COMMA ,
913,914c913,914
< T_CLOSE_P
< T_SEMI_COLON
---
> T_CLOSE_P )
> T_SEMI_COLON ;
916c916
< T_OPEN_P
---
> T_OPEN_P (
918c918
< T_COMMA
---
> T_COMMA ,
920,924c920,924
< T_CLOSE_P
< T_SEMI_COLON
< T_CLOSE_K
< T_EOF
< lines:200
---
> T_CLOSE_P )
> T_SEMI_COLON ;
> T_CLOSE_K }
> T_EOF 
> lines:208
